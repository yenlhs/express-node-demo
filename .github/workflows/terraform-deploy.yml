name: Terraform Infrastructure Deployment

on:
  push:
    branches: [main, master]
    paths:
      - "terraform/**"
      - ".github/workflows/terraform-deploy.yml"
  pull_request:
    branches: [main, master]
    paths:
      - "terraform/**"
      - ".github/workflows/terraform-deploy.yml"

env:
  AWS_REGION: ap-southeast-2
  TF_VERSION: "1.5.0"

jobs:
  terraform:
    name: Terraform Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check -recursive

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Check Current State
        if: github.event_name == 'push'
        working-directory: ./terraform
        run: |
          echo "🔍 Checking current Terraform state..."
          if terraform state list 2>/dev/null | grep -q .; then
            echo "✅ Terraform state exists - this will be an UPDATE"
            echo "EXISTING_STATE=true" >> $GITHUB_ENV
          else
            echo "🆕 No Terraform state found - this will be a NEW DEPLOYMENT"
            echo "EXISTING_STATE=false" >> $GITHUB_ENV
          fi

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan
        env:
          TF_VAR_aws_region: ${{ env.AWS_REGION }}

      - name: Terraform Apply (Full Deployment or Update)
        if: github.event_name == 'push'
        working-directory: ./terraform
        run: |
          if [ "$EXISTING_STATE" = "false" ]; then
            echo "🚀 Starting FULL INFRASTRUCTURE DEPLOYMENT..."
            echo "This will create: VPC, ECS Cluster, Load Balancer, Security Groups, etc."
          else
            echo "🔄 Starting INFRASTRUCTURE UPDATE..."
            echo "This will update existing resources based on changes."
          fi

          terraform apply -auto-approve tfplan

          if [ "$EXISTING_STATE" = "false" ]; then
            echo "✅ FULL INFRASTRUCTURE DEPLOYMENT COMPLETE!"
          else
            echo "✅ INFRASTRUCTURE UPDATE COMPLETE!"
          fi

      - name: Wait for ECS Service to be Ready
        if: github.event_name == 'push'
        run: |
          echo "⏳ Waiting for ECS service to be ready..."
          # Wait for the service to exist and be stable
          aws ecs wait services-stable \
            --cluster express-node-demo-cluster \
            --services express-node-demo-service \
            --region ap-southeast-2 || echo "Service not ready yet, continuing..."

      - name: Update ECS Service to 2 Containers
        if: github.event_name == 'push'
        run: |
          echo "📈 Updating ECS service to run 2 containers..."
          aws ecs update-service \
            --cluster express-node-demo-cluster \
            --service express-node-demo-service \
            --desired-count 2 \
            --region ap-southeast-2

          echo "⏳ Waiting for service to stabilize with 2 containers..."
          aws ecs wait services-stable \
            --cluster express-node-demo-cluster \
            --services express-node-demo-service \
            --region ap-southeast-2

          echo "✅ ECS service updated to 2 containers"

      - name: Show Complete Deployment Status
        if: github.event_name == 'push'
        run: |
          echo "🎉 === DEPLOYMENT COMPLETE ==="

          # Get load balancer info
          LB_DNS=$(aws elbv2 describe-load-balancers --names express-node-demo-alb --query 'LoadBalancers[0].DNSName' --output text 2>/dev/null || echo "Load balancer not ready yet")

          echo "🌐 Load Balancer URL: https://$LB_DNS"
          echo "🏗️  ECS Cluster: express-node-demo-cluster"
          echo "⚙️  ECS Service: express-node-demo-service"
          echo "📦 ECR Repository: 189864887312.dkr.ecr.ap-southeast-2.amazonaws.com/express-node-demo"

          # Show current service status
          echo ""
          echo "📊 Current ECS Service Status:"
          aws ecs describe-services \
            --cluster express-node-demo-cluster \
            --services express-node-demo-service \
            --query 'services[0].{DesiredCount:desiredCount,RunningCount:runningCount,PendingCount:pendingCount,Status:status}' \
            --output table || echo "Service status not available yet"

          # Test the endpoint if load balancer is ready
          if [ "$LB_DNS" != "Load balancer not ready yet" ]; then
            echo ""
            echo "🧪 Testing HTTPS endpoint..."
            sleep 10  # Give it a moment to be fully ready
            curl -k -f https://$LB_DNS || echo "⚠️  Endpoint test failed, but deployment completed"
          fi

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/tfplan', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan 📋
              
              \`\`\`hcl
              ${plan}
              \`\`\`
              
              This plan will be applied when the PR is merged.`
            });
